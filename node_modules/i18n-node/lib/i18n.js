/**
 * Module dependencies.
 */

var Mustache = require('mustache');
var util = require('util');
var fs = require('fs');
var path = require('path');

/**
 * I18n class.
 *
 * @param {Object} options
 * @api public
 */
 
function I18n (options) {
	this.options = util._extend(util._extend({}, this.defaults), options);
	this.postProcessors = {};
	this.loadTranslations();
}

/**
 * Get a list of all the different locales.
 *
 * @return {Array}
 * @api private
 */

I18n.prototype.getLocales = function () {
	return Object.keys(this.translations);
};

/**
 * Load translations from directory.
 *
 * @api private
 */

I18n.prototype.loadTranslations = function () {
	var self = this;
	var translations = {};
	var llTranslations = {};
	var locale;
	var files = fs.readdirSync(this.options.directory);
	files.forEach(function (file) {
		try {
			locale = path.basename(file).split('.').shift();
			translations[locale] = JSON.parse(fs.readFileSync(self.getDirectoryPath(locale)));
			llTranslations[locale.split('_')[0]] = locale;
		} catch (err) {
			console.log(err);
		}
	});
	this.translations = translations;
	this.llTranslations = llTranslations;
};

/**
 * Get all translations for locale.
 *
 * @param {String} locale
 * @return {Object}
 * @api private
 */

I18n.prototype.getTranslations = function (locale) {
	return this.translations[locale] || {};
};

/**
 * Detect locale automatically.
 *
 * @param {Object} req
 * @return {String}
 * @api private
 */

I18n.prototype.detectLocale = function (req) {
	var locale;
	var tld;

	// Read from query string.
	if (!locale && req && req.query && req.query.locale) {
		locale = req.query.locale;
	}

	// Facebook exposes a `fb_locale` parameter in the query string:
	// https://developers.facebook.com/blog/post/605/
	if (!locale && req && req.query && req.query.fb_locale) {
		locale = req.query.fb_locale;
	}

	// Read from session.
	if (!locale && req && req.session) {
		locale = req.session.locale;
	}

	// Read from cookies.
	if (!locale && req && req.cookies) {
		locale = req.cookies.locale;
	}

	// Read from `Accept-Language` header.
	if (!locale && req && req.headers['accept-language']) {
		try {
			var acceptLanguage = req.headers['accept-language'].split(',');

			for (var i = 0; i < acceptLanguage.length; i++) {
				var candidate = acceptLanguage[i].trim().replace('-', '_').split(';')[0];

				if (this.translations[candidate]) {
					locale = candidate;
					break;
				} else if (this.llTranslations[candidate]) {
					locale = this.llTranslations[candidate];
					break;
				}
			}
		} catch (err) {}
	}

	// Read from top-level domain.
	if (!locale && req) {
		tld = req.headers.host.split('.').pop();
		if (tld) locale = this.options.tld[tld];
	}

	if (!locale || !this.translations[locale]) {
		locale = this.options.defaultLocale;
	}

	return locale;
};

/**
 * Translate a key.
 *
 * @param {String} locale
 * @param {String} key
 * @param {Object} view
 * @param {Object} options
 * @return {String}
 * @api public
 */

I18n.prototype.translate = I18n.prototype.t = function (locale, key, view, options) {
	var translations = this.getTranslations(locale);
	var value = Mustache.render(translations[key] || key, view, translations);
	var processor;

	if (options && options.postProcess) {
		processor = this.postProcessors[options.postProcess];
		if (processor) value = processor(value);
	}

	return value;
};

/**
 * Scope translate method to specific locale.
 *
 * @param {String} locale
 * @return {Function}
 * @api private
 */

I18n.prototype.translateHelper = function (locale) {
	var self = this;
	return function (key, view, options) {
		return self.translate(locale, key, view, options);
	};
};

/**
 * Get normalized path directory.
 *
 * @param {String} locale
 * @return {String}
 */

I18n.prototype.getDirectoryPath = function (locale) {
	return path.normalize(path.join(this.options.directory, locale + '.json'));
};

/**
 * Add a post processor.
 *
 * @param {String} name
 * @param {Function} fn
 * @api public
 */

I18n.prototype.addPostProcessor = function (name, fn) {
	if (name && typeof fn === 'function') this.postProcessors[name] = fn;
};

/**
 * Get language from locale.
 *
 * @param {String} locale
 * @return {String}
 * @api public
 */

I18n.prototype.getLanguage = function (locale) {
	return locale.split('_')[0];
};

/**
 * Get country from locale.
 *
 * @param {String} locale
 * @return {String}
 * @api public
 */

I18n.prototype.getCountry = function (locale) {
	return locale.split('_')[1];
};

/**
 * Express middleware.
 *
 * @param {Object} req
 * @param {Object} res
 * @param {Function} next
 * @api public
 */

I18n.prototype.middleware = function () {
	var self = this;
	return function (req, res, next) {
		var locale = self.detectLocale(req);
		var language = self.getLanguage(locale);
		var country = self.getCountry(locale);

		req.t = self.translateHelper(locale);
		req.i18n = {
			locale: locale,
			locales: self.getLocales(),
			translations: self.getTranslations(locale),
			language: language,
			country: country
		};

		if (res.locals) {
			res.locals.t = req.t;
			res.locals.i18n = req.i18n;
		}

		next();
	};
};

/**
 * Default options.
 */

I18n.prototype.defaults = {
	defaultLocale: 'en_US',
	directory: './locales',
	tld: {
		'dk': 'da_DK',
		'no': 'nb_NO',
		'se': 'se_SE',
		'de': 'de_DE',
		'com': 'en_US',
		'us': 'en_US',
		'co.uk': 'en_GB',
		'uk': 'en_GB'
	}
};

/**
 * Export I18n function as the module.
 */

module.exports = I18n;
